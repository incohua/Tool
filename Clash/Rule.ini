#---------------------------------------------------#
# 通用设置 (General Settings)
#---------------------------------------------------#
[common]
# HTTP 代理端口
port = 7890
# SOCKS5 代理端口
socks-port = 7891
# 允许局域网连接
allow-lan = true
# 规则模式: rule (规则) / global (全局) / direct (直连)
mode = rule
# 日志级别: silent / error / warning / info / debug
log-level = info
# 外部控制器 (API) 地址
external-controller = '127.0.0.1:9090'
# (可选) 外部 UI 路径
# external-ui = /path/to/ui/folder
# (可选) RESTful API 密钥
# secret = ''
# (可选) 绑定地址， '*' 表示监听所有地址
# bind-address = '*'

#---------------------------------------------------#
# 代理提供者 (Proxy Providers) - 在这里填写你的订阅链接
# 这是 INI 模板的关键部分，转换器会用这里的 URL 获取节点
#---------------------------------------------------#
[proxy provider "Proxy-Node"]
type = http
# !!! 将下面的 URL 替换为你的 Bitz 订阅链接 !!!
url = "YOUR_SUBSCRIPTION_URL_HERE"
# (可选) 建议的下载间隔 (秒)
interval = 3600
path = ./providers/Proxy-Node.yaml
health-check = { enable = true, url = 'http://www.google.com/generate_204', interval = 600 }
# (可选) 如果你的订阅需要用户代理
# user-agent = "Clash"

# *** 如果你有更多订阅，可以在这里添加更多 [proxy provider "ProviderName"] 段 ***

#---------------------------------------------------#
# 策略组 (Proxy Groups)
#---------------------------------------------------#
[proxy group "Proxy"]
type = select
# proxies 列表定义了这个组可以选择哪些策略 (其他组或内置策略)
proxies = 自建节点, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点, 🇫🇷 法国节点, 🇩🇪 德国节点, DIRECT
icon = 'https://raw.githubusercontent.com/pompurin404/mihomo-party/master/resources/icon.png'

[proxy group "AI-Rule"]
type = select
proxies = Proxy, 自建节点, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点, 🇫🇷 法国节点, 🇩🇪 德国节点, DIRECT
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/ChatGPT.png'

[proxy group "Telegram"]
type = select
proxies = Proxy, 自建节点, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点, 🇫🇷 法国节点, 🇩🇪 德国节点, DIRECT
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Telegram.png'

[proxy group "Netflix"]
type = select
proxies = Proxy, 自建节点, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点, 🇫🇷 法国节点, 🇩🇪 德国节点, DIRECT
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Netflix.png'

[proxy group "Disney+"]
type = select
proxies = Proxy, 自建节点, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点, 🇫🇷 法国节点, 🇩🇪 德国节点, DIRECT
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Disney.png'

[proxy group "HBO"]
type = select
proxies = Proxy, 自建节点, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点, 🇫🇷 法国节点, 🇩🇪 德国节点, DIRECT
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/HBO.png'

[proxy group "YouTube"]
type = select
proxies = Proxy, 自建节点, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点, 🇫🇷 法国节点, 🇩🇪 德国节点, DIRECT
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/YouTube.png'

[proxy group "Spotify"]
type = select
proxies = Proxy, 自建节点, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点, 🇫🇷 法国节点, 🇩🇪 德国节点, DIRECT
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Spotify.png'

[proxy group "Gamer"]
type = select
# 使用 use 参数指定从哪些 provider 获取节点，然后应用 filter
use = Proxy-Node
filter = '^(?=.*((?i)游戏|🎮|(\b(GAME)\b)))(?!.*((?i)回国|校园)).*$'
proxies = DIRECT, Proxy, 自建节点
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Game.png'

[proxy group "Microsoft"]
type = select
proxies = DIRECT, Proxy, 自建节点, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点, 🇫🇷 法国节点, 🇩🇪 德国节点
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Microsoft.png'

[proxy group "GlobalMedia"]
type = select
proxies = Proxy, 自建节点, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点, 🇫🇷 法国节点, 🇩🇪 德国节点, DIRECT
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/ForeignMedia.png'

[proxy group "自建节点"]
# 假设你的自建节点在 Proxy-Node 这个 provider 里
type = select
use = Proxy-Node
# 如果自建节点有特定标识，可以在这里加 filter
# filter = '你的自建节点名称模式'
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Airport.png'

[proxy group "🇭🇰 香港节点"]
type = url-test
interval = 300
tolerance = 50
lazy = true
url = 'http://www.google.com/generate_204'
method = GET
probe-timeout = 3000
hidden = false
use = Proxy-Node
filter = '^(?=.*((?i)🇭🇰|香港|(\b(HK|Hong)\b))).*$'
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Hong_Kong.png'

[proxy group "🇹🇼 台湾节点"]
type = select
use = Proxy-Node
filter = '^(?=.*((?i)🇹🇼|台湾|台|(\b(TW|Taiwan)\b))).*$'
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/China.png'

[proxy group "🇯🇵 日本节点"]
type = fallback
interval = 10
lazy = true
url = 'http://www.google.com/generate_204'
disable-udp = false
timeout = 2000
max-failed-times = 3
hidden = false
use = Proxy-Node
filter = '^(?=.*((?i)🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(\b(JP|Japan)\b))).*$'
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Japan.png'

[proxy group "🇰🇷 韩国节点"]
type = fallback
interval = 10
lazy = true
url = 'http://www.google.com/generate_204'
disable-udp = false
timeout = 2000
max-failed-times = 3
hidden = false
use = Proxy-Node
filter = '^(?=.*((?i)🇰🇷|韩国|韓|首尔|(\b(KR|Korea)\b))).*$'
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Korea.png'

[proxy group "🇸🇬 新加坡节点"]
type = url-test
interval = 300
tolerance = 50
lazy = true
url = 'http://www.google.com/generate_204'
method = GET
probe-timeout = 3000
hidden = false
use = Proxy-Node
filter = '^(?=.*((?i)🇸🇬|新加坡|狮|(\b(SG|Singapore)\b))).*$'
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Singapore.png'

[proxy group "🇺🇸 美国节点"]
type = fallback
interval = 10
lazy = true
url = 'http://www.google.com/generate_204'
disable-udp = false
timeout = 2000
max-failed-times = 3
hidden = false
use = Proxy-Node
filter = '^(?=.*((?i)🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(US|United States)\b))).*$'
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/United_States.png'

[proxy group "🇬🇧 英国节点"]
type = fallback
interval = 10
lazy = true
url = 'http://www.google.com/generate_204'
disable-udp = false
timeout = 2000
max-failed-times = 3
hidden = false
use = Proxy-Node
filter = '^(?=.*((?i)🇬🇧|英国|伦敦|(\b(UK|United Kingdom)\b))).*$'
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/United_Kingdom.png'

[proxy group "🇫🇷 法国节点"]
type = fallback
interval = 10
lazy = true
url = 'http://www.google.com/generate_204'
disable-udp = false
timeout = 2000
max-failed-times = 3
hidden = false
use = Proxy-Node
filter = '^(?=.*((?i)🇫🇷|法国|(\b(FR|France)\b))).*$'
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/France.png'

[proxy group "🇩🇪 德国节点"]
type = fallback
interval = 10
lazy = true
url = 'http://www.google.com/generate_204'
disable-udp = false
timeout = 2000
max-failed-times = 3
hidden = false
use = Proxy-Node
filter = '^(?=.*((?i)🇩🇪|德国|(\b(DE|Germany)\b))).*$'
icon = 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Germany.png'

#---------------------------------------------------#
# 规则提供者 (Rule Providers)
#---------------------------------------------------#
[rule provider "GlobalMedia"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GlobalMedia/GlobalMedia_Classical.yaml'
path = ./RuleSet/GlobalMedia.yaml

[rule provider "ChinaMedia"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMedia/ChinaMedia.yaml'
path = ./RuleSet/ChinaMedia.yaml

[rule provider "Netflix"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Netflix/Netflix_Classical_No_Resolve.yaml'
path = ./RuleSet/Netflix.yaml

[rule provider "Disney+"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Disney/Disney_No_Resolve.yaml'
path = ./RuleSet/Disney+.yaml

[rule provider "HBO"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/HBO/HBO.yaml'
path = ./RuleSet/HBO.yaml

[rule provider "YouTube"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube_No_Resolve.yaml'
path = ./RuleSet/YouTube.yaml

[rule provider "Microsoft"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Microsoft/Microsoft_No_Resolve.yaml'
path = ./RuleSet/Microsoft.yaml

[rule provider "PlayStation"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/PlayStation/PlayStation.yaml'
path = ./RuleSet/PlayStation.yaml

[rule provider "Epic"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Epic/Epic.yaml'
path = ./RuleSet/Epic.yaml

[rule provider "Xbox"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Xbox/Xbox.yaml'
path = ./RuleSet/Xbox.yaml

[rule provider "Steam"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Steam/Steam.yaml'
path = ./RuleSet/Steam.yaml

[rule provider "Spotify"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Spotify/Spotify.yaml'
path = ./RuleSet/Spotify.yaml

[rule provider "Telegram"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Telegram/Telegram.yaml'
path = ./RuleSet/Telegram.yaml

[rule provider "OpenAI"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OpenAI/OpenAI_No_Resolve.yaml'
path = ./RuleSet/OpenAI.yaml

[rule provider "Gemini"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Gemini/Gemini.yaml'
path = ./RuleSet/Gemini.yaml

[rule provider "Claude"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Claude/Claude.yaml'
path = ./RuleSet/Claude.yaml

[rule provider "Proxy"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Proxy/Proxy_Classical_No_Resolve.yaml'
path = ./RuleSet/Proxy.yaml

[rule provider "AdvertisingLite"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/AdvertisingLite/AdvertisingLite_Classical.yaml'
path = ./RuleSet/AdvertisingLite.yaml

[rule provider "China"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/ChinaMax/ChinaMax_Classical.yaml'
path = ./RuleSet/China.yaml

[rule provider "LAN"]
type = http
behavior = classical
interval = 86400
format = yaml
proxy = DIRECT
url = 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Lan/Lan.yaml'
path = ./RuleSet/LAN.yaml

#---------------------------------------------------#
# 规则 (Rules)
#---------------------------------------------------#
[rule]
RULE-SET,Telegram,Telegram
RULE-SET,Spotify,Spotify
RULE-SET,Netflix,Netflix
RULE-SET,Disney+,Disney+
RULE-SET,HBO,HBO
RULE-SET,YouTube,YouTube
RULE-SET,AdvertisingLite,REJECT
RULE-SET,ChinaMedia,DIRECT
RULE-SET,GlobalMedia,GlobalMedia
RULE-SET,Steam,Gamer
RULE-SET,PlayStation,Gamer
RULE-SET,Epic,Gamer
RULE-SET,Xbox,Gamer
RULE-SET,OpenAI,AI-Rule
RULE-SET,Gemini,AI-Rule
RULE-SET,Claude,AI-Rule
RULE-SET,Microsoft,Microsoft
# 注意：YAML 中的 "Proxy" 规则集这里也命名为 "Proxy"，与总的 "Proxy" 策略组同名，这可能会引起混淆，但保持与原配置一致
RULE-SET,Proxy,Proxy
DOMAIN-SUFFIX,xujc.com,DIRECT
RULE-SET,China,DIRECT
RULE-SET,LAN,DIRECT
GEOIP,CN,DIRECT
MATCH,,Proxy